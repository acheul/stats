
      class TocMaker { constructor(max_level=4) { this.max_level = (max_level) ? max_level : 4; this.array = []; this.cur_max_level = 1; this.build_array(); this.use_number = false; this.block_title = "Titles"; this.use_title_name = false; this.root_title = "Title"; this.bar_unit_size = 8; this.wing_left_margin = 4; } get content_main() { let content = document.getElementById("content"); if (content) { return content.firstElementChild; } else { return; } } get page_wrapper() { return document.getElementById("page-wrapper"); } get nav_prev_width() { let page_wrapper = document.getElementById("page-wrapper"); if (page_wrapper) { let nav_wrapper = page_wrapper.children.item(1); if (nav_wrapper) { let width = nav_wrapper.firstElementChild.getBoundingClientRect().width; return width; } } return; } build_array() { const main = this.content_main; if (main==null) { console.log("content's main is not found"); return; } let i = 0; for (const part of main.children) { let tn = part.tagName.toLowerCase(); let level = (tn=="h1") ? 1 : (tn=="h2") ? 2 : (tn=="h3") ? 3 : (tn=="h4") ? 4 : (tn=="h5") ? 5 : (tn=="h6") ? 6 : null; if (level != null) { if (level<=this.max_level) { if (level>this.cur_max_level) { this.cur_max_level = level; } part.dataset.ith = `${i}`; let a = part.firstElementChild; let link = "#"+a.href.split("#")[1]; let name = a.textContent; let len = this.array.length; let number = (len==0) ? null : (this.array[len-1][1]==level) ? this.array[len-1][2]+1 : 1; this.array.push([i, level, number, link, name]); i += 1; } } } } build_block(block_id, use_number, block_title) { if (this.array.length==0) { return; } const block = document.getElementById(block_id); if (block==null) { console.log("The ToC Block's id is not valid."); return; } this.use_number = (use_number) ? use_number : block.dataset.use_number=="true"; this.block_title = (block_title) ? block_title : (block.dataset.block_title) ? block.dataset.block_title : "Titles"; let box = document.createElement("div"); box.classList.add("tock-box"); let text = document.createTextNode(this.block_title); let cell = document.createElement("div"); cell.classList.add("tock-cell", "tock-root"); cell.appendChild(text); box.appendChild(cell); for (const [ith, level, number, link, name] of this.array) { if (ith>0) { let a = document.createElement("a"); a.href = link; a.title = name; a.dataset.ith = `${ith}`; a.classList.add("tock-a", `tock-padl-${level}`); if (this.use_number && number!=null) { let text = document.createTextNode(`${number}`); let span = document.createElement("span"); span.classList.add("tock-a-num"); span.appendChild(text); a.appendChild(span); } let text = document.createTextNode(name); let span = document.createElement("span"); span.appendChild(text); a.appendChild(span); let cell = document.createElement("div"); cell.classList.add("tock-cell", "tock-each"); cell.appendChild(a); box.appendChild(cell); } } block.appendChild(box); } build_wing(wing_id, use_number, use_title_name, root_title, bar_unit_size, wing_left_margin) { if (this.array.length==0) { return; } this.page_wrapper.style.position = "relative"; const wing = document.getElementById(wing_id); if (wing==null) { console.log("The ToC Wing's id is not valid."); return; } this.use_number = (use_number) ? use_number : wing.dataset.use_number=="true"; this.use_title_name = (use_title_name) ? use_title_name : wing.dataset.use_title_name != "false"; this.root_title = (this.use_title_name) ? null : (root_title) ? root_title : "Title"; this.bar_unit_size = (bar_unit_size) ? bar_unit_size : (wing.dataset.bar_unit_size) ? parseInt(wing.dataset.bar_unit_size) : 8; this.wing_left_margin = (wing_left_margin) ? wing_left_margin : (wing.dataset.wing_left_margin) ? parseInt(wing.dataset.wing_left_margin) : 4; let box = document.createElement("div"); box.classList.add("tocw-box"); for (const [ith, level, number, link, name] of this.array) { let a = document.createElement("a"); a.href = link; a.title = name; a.dataset.ith = `${ith}`; a.classList.add("tocw-a"); let title = document.createElement("div"); title.dataset.ith = `${ith}`; title.classList.add("opacity0", "tocw-a-title", `tocw-padl-${level}`); if (ith>0 && this.use_number && number!=null) { let text = document.createTextNode(`${number}`); let span = document.createElement("span"); span.classList.add("tocw-a-num"); span.appendChild(text); title.appendChild(span); } let name_ = (ith==0 && this.root_title!=null) ? this.root_title : name; let text = document.createTextNode(name_); let span = document.createElement("span"); span.appendChild(text); title.appendChild(span); let bar = document.createElement("div"); bar.dataset.ith = `${ith}`; bar.classList.add("tocw-a-bar"); let size = (this.cur_max_level-level+1) * this.bar_unit_size; bar.style.width = `${size}px`; a.appendChild(bar); a.appendChild(title); let cell = document.createElement("div"); cell.classList.add("tocw-cell", "tocw-each"); cell.appendChild(a); box.appendChild(cell); } let wrap = document.createElement("div"); wrap.classList.add("tocw-wrap"); wrap.style.maringLeft = `${this.wing_left_margin}px`; wrap.appendChild(box); let page_wrapper = this.page_wrapper; page_wrapper.appendChild(wrap); this._set_wing_wrap_pos(wrap); this._focus_current_title(box); window.addEventListener("resize", (e)=>{ this._set_wing_wrap_pos(wrap); }); window.addEventListener("scroll", (e)=>{ this._set_wing_wrap_pos(wrap); this._focus_current_title(box); }); let left_bttn = document.getElementsByClassName("left-buttons")[0].firstElementChild; left_bttn.addEventListener("click", (e)=>{ this._set_wing_wrap_pos(wrap); }); box.addEventListener("mouseenter", (e)=>{ for (const title of box.getElementsByClassName("tocw-a-title")) { title.classList.remove("opacity0"); } for (const bar of box.getElementsByClassName("tocw-a-bar")) { bar.classList.add("opacity0"); } }); box.addEventListener("mouseleave", (e)=>{ for (const title of box.getElementsByClassName("tocw-a-title")) { title.classList.add("opacity0"); } for (const bar of box.getElementsByClassName("tocw-a-bar")) { bar.classList.remove("opacity0"); } }); } _set_wing_wrap_pos(wrap) { let height = window.innerHeight; let content = document.getElementById("content"); let main = content.firstElementChild; let gap = content.getBoundingClientRect().width - main.getBoundingClientRect().width; gap *= 0.5; let nav_prev_width = this.nav_prev_width; if (nav_prev_width) { gap -= nav_prev_width; } if (gap>this.cur_max_level*this.bar_unit_size + this.wing_left_margin) { let left = (nav_prev_width) ? nav_prev_width : 0; let top = window.scrollY; wrap.style.height = `${height}px`; wrap.style.width = `${gap}px`; wrap.style.top = `${top}px`; wrap.style.left = `${left}px`; wrap.style.visibility = "visible"; } else { wrap.style.visibility = "hidden"; } } _focus_current_title(box) { let i; let content_main = this.content_main; if (content_main==null) { console.log("content's main is not found."); return; } for (const part of content_main.children) { if (part.getBoundingClientRect().top > 0) { let i_ = part.dataset.ith; if (i_!=null) { i = i_; break; } } } for (const title of box.getElementsByClassName("tocw-a-title")) { if (title.dataset.ith==i && i!=null) { title.classList.add("tocw-a-title-cur"); } else { title.classList.remove("tocw-a-title-cur"); } } for (const bar of box.getElementsByClassName("tocw-a-bar")) { if (bar.dataset.ith==i && i!=null) { bar.classList.add("tocw-a-bar-cur"); } else { bar.classList.remove("tocw-a-bar-cur"); } } } }
      window.addEventListener("load", (e)=>{
        const toc_maker = new TocMaker();
        toc_maker.build_block("tock");
        toc_maker.build_wing("tocw");
      });
      